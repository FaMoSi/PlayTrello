// Generated by CoffeeScript 1.6.3
var deletePrototype, insert, insertMany, isRaw, select, update;

isRaw = function(x) {
  return (x != null) && ('object' === typeof x) && ('function' === typeof x.sql);
};

insert = {
  sql: function(mohair) {
    var escapedKeys, keys, row, table, that;
    that = this;
    table = mohair._escape(mohair._table);
    keys = Object.keys(that._data);
    escapedKeys = keys.map(function(key) {
      return mohair._escape(key);
    });
    row = keys.map(function(key) {
      if (isRaw(that._data[key])) {
        return that._data[key].sql();
      } else {
        return '?';
      }
    });
    return "INSERT INTO " + table + "(" + (escapedKeys.join(', ')) + ") VALUES (" + (row.join(', ')) + ")";
  },
  params: function() {
    var params, that;
    that = this;
    params = [];
    Object.keys(that._data).map(function(key) {
      if (isRaw(that._data[key])) {
        return params = params.concat(that._data[key].params());
      } else {
        return params.push(that._data[key]);
      }
    });
    return params;
  }
};

module.exports.insert = function(data) {
  var object;
  object = Object.create(insert);
  object._data = data;
  return object;
};

insertMany = {
  sql: function(mohair) {
    var escapedKeys, first, keys, rows, table, that;
    that = this;
    table = mohair._escape(mohair._table);
    first = that._array[0];
    keys = Object.keys(first);
    escapedKeys = keys.map(function(key) {
      return mohair._escape(key);
    });
    rows = that._array.map(function(data) {
      var row;
      row = keys.map(function(key) {
        if (isRaw(data[key])) {
          return data[key].sql();
        } else {
          return '?';
        }
      });
      return "(" + (row.join(', ')) + ")";
    });
    return "INSERT INTO " + table + "(" + (escapedKeys.join(', ')) + ") VALUES " + (rows.join(', '));
  },
  params: function(mohair) {
    var firstKeys, params, that;
    that = this;
    firstKeys = Object.keys(that._array[0]);
    params = [];
    that._array.forEach(function(data) {
      return firstKeys.forEach(function(key) {
        if (isRaw(data[key])) {
          return params = params.concat(data[key].params());
        } else {
          return params.push(data[key]);
        }
      });
    });
    return params;
  }
};

module.exports.insertMany = function(array) {
  var object;
  object = Object.create(insertMany);
  object._array = array;
  return object;
};

select = {
  sql: function(mohair) {
    var sql, table, that;
    that = this;
    table = mohair._escape(mohair._table);
    sql = "SELECT " + that._sql + " FROM " + table;
    mohair._joins.forEach(function(join) {
      sql += " " + join.sql;
      if (join.criterion != null) {
        return sql += " AND (" + (join.criterion.sql()) + ")";
      }
    });
    if (mohair._where != null) {
      sql += " WHERE " + (mohair._where.sql());
    }
    if (mohair._group != null) {
      sql += " GROUP BY " + mohair._group;
    }
    if (mohair._order != null) {
      sql += " ORDER BY " + mohair._order;
    }
    if (mohair._limit != null) {
      sql += " LIMIT ?";
    }
    if (mohair._offset != null) {
      sql += " OFFSET ?";
    }
    return sql;
  },
  params: function(mohair) {
    var params, that;
    that = this;
    params = [];
    if (that._params != null) {
      params = params.concat(that._params);
    }
    mohair._joins.forEach(function(join) {
      if (join.criterion != null) {
        return params = params.concat(join.criterion.params());
      }
    });
    if (mohair._where != null) {
      params = params.concat(mohair._where.params());
    }
    if (mohair._limit != null) {
      params.push(mohair._limit);
    }
    if (mohair._offset != null) {
      params.push(mohair._offset);
    }
    return params;
  }
};

module.exports.select = function(sql, params) {
  var object;
  object = Object.create(select);
  object._sql = sql;
  object._params = params;
  return object;
};

update = {
  sql: function(mohair) {
    var keys, sql, table, that, updates;
    that = this;
    table = mohair._escape(mohair._table);
    keys = Object.keys(that._updates);
    updates = keys.map(function(key) {
      var escapedKey;
      escapedKey = mohair._escape(key);
      if (isRaw(that._updates[key])) {
        return "" + escapedKey + " = " + (that._updates[key].sql());
      } else {
        return "" + escapedKey + " = ?";
      }
    });
    sql = "UPDATE " + table + " SET " + (updates.join(', '));
    if (mohair._where != null) {
      sql += " WHERE " + (mohair._where.sql());
    }
    return sql;
  },
  params: function(mohair) {
    var params, that;
    that = this;
    params = [];
    Object.keys(that._updates).forEach(function(key) {
      if (isRaw(that._updates[key])) {
        return params = params.concat(that._updates[key].params());
      } else {
        return params.push(that._updates[key]);
      }
    });
    if (mohair._where != null) {
      params = params.concat(mohair._where.params());
    }
    return params;
  }
};

module.exports.update = function(updates) {
  var object;
  object = Object.create(update);
  object._updates = updates;
  return object;
};

deletePrototype = {
  sql: function(mohair) {
    var sql, table, that;
    that = this;
    table = mohair._escape(mohair._table);
    sql = "DELETE FROM " + table;
    if (mohair._where != null) {
      sql += " WHERE " + (mohair._where.sql());
    }
    return sql;
  },
  params: function(mohair) {
    if (mohair._where != null) {
      return mohair._where.params();
    } else {
      return [];
    }
  }
};

module.exports["delete"] = function() {
  return Object.create(deletePrototype);
};
