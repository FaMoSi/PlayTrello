hat = require 'hat'

store = require './store'

nop = (req, res, next) -> next()
bind = (fst, snd) -> (req, res, next) -> fst req, res, -> snd req, res, next
compose = (mw) -> mw.reduce ((state, current) -> bind state, current), nop

dayDuration = 1000 * 60 * 60 * 24

encodeCookie = (key, value, opts = {}) ->
    pairs = []
    pairs.push "#{key}=#{value}"
    pairs.push "Max-Age=#{opts['max-age']}" if opts['max-age']
    pairs.push "Domain=#{opts.domain}" if opts.domain
    pairs.push "Path=#{opts.path}" if opts.path
    pairs.push "Expires=#{opts.expires}" if opts.expires
    pairs.push "HttpOnly" if opts.httpOnly
    pairs.push "Secure" if opts.secure
    return pairs.join '; '

setCookieMiddleware = (req, res, next) ->
    throw new Error 'missing req.cookies' unless req.cookies?
    throw new Error 'missing opts' unless @opts
    req.cookies.session_id ?= hat 128
    req.cookies.session_secret ?= hat 128

    for key, value of req.cookies
        res.setHeader 'Set-Cookie', encodeCookie key, value, @opts
    next()

syncMiddleware = (req, res, next) ->
    # load session
    {session_id, session_secret} = req.cookies
    store = @store
    throw new Error 'missing datastore' unless store?
    throw new Error 'missing store.setByIdAndSecret' unless store?.setByIdAndSecret?
    throw new Error 'missing store.getByIdAndSecret' unless store?.getByIdAndSecret?

    # hook original request.end
    origEnd = res.end
    res.end = (data, encoding) ->
        res.end = origEnd
        store.setByIdAndSecret session_id, session_secret, req.session, (err) ->
            throw err if err?
            res.end data, encoding

    # load session data from database
    store.getByIdAndSecret session_id, session_secret, (err, session) ->
        throw err if err?
        req.session = session
        next()


cleanupMiddleware = (req, res, next) ->
    throw new Error 'missing store.deleteOlderThen' unless @store?.deleteOlderThen?
    return next() if Math.random() > (@probability or 0.001)
    console.info 'run session cleanup'
    @days ?= 7
    today = new Date()
    cutofDate = new Date(+new Date - @days * dayDuration)
    @store.deleteOlderThen cutofDate, (err) ->
        return console.err err if err?
        console.info 'session cleanup finished'
        next()

extendObject = (obj, key, value) ->
    opts = {}
    opts[key] = value: value
    Object.create obj, opts

module.exports =
    cookieHandler: setCookieMiddleware
    syncHandler: syncMiddleware
    cleanupHandler: cleanupMiddleware

    setCookieHandler: (handler) -> Object.create @, cookieHandler: value: handler
    setCleanupeHandler: (handler) -> Object.create @, cleanupHandler: value: handler
    setSyncHandler: (handler) -> Object.create @, syncHandler: value: handler

    opts: {}
    set: (key, value) -> extendObject @, key, value
    setOpts: (key, value) -> extendObject @opts, key, value

    middleware: ->
        compose [
            @cookieHandler.bind opts: @opts
            @syncHandler.bind store: @_store
            @cleanupHandler.bind store: @_store
        ]

    store: (store) -> Object.create @, {_store: value: store}
    domain: (domain) -> @set 'opts', extendObject @opts, 'domain', domain
    maxAge: (maxAge) ->
        opts = Object.create @opts, {'max-age': value: maxAge}
        Object.create @, opts: value: opts
    path: (path) -> @set 'opts', @setOpts 'path', path
    expires: (expires) -> @set 'opts', @setOpts 'expires', expires
    isHttpOnly: (isHttpOnly) -> @set 'opts', @setOpts 'httpOnly', isHttpOnly
    isSecure: (isSecure) -> @set 'opts', @setOpts 'secure', isSecure

module.exports.defaultStores = store
